All code should be portable and cross platform for all of the platforms we intend to support.
    Try not to use OS-specific APIs or commands, or any system() calls.
        If this is necessary, have specific implementations for all of the platforms.

lowerCamelCase for variables/objects/functions/constants
    Examples:
        int someVar = 5;
        someFunc(5);
        someObj.someFunc(5);

UpperCamelCase for classes/types
    Examples:
        class MyClass;
        typedef unsigned int SomeType;
        
1 .h file and 1 .cpp file for each class
    .h file must use include guards and NOT #pragma

#includes must be in the correct order:
    1. The corresponding .h file for the .cpp file
    2. C++ standard libraries, like iostream or vector
    3. External libraries, like SFML/Graphics.hpp
    4. Other .h files part of the project

The order of classes/functions in header files should be the same order in the corresponding .cpp files.
Classes should be declared in the order of public:, protected:, then private:.
    It helps you see how the class is used before seeing the internals of it.
Constructors should be the first thing in classes.

"type* varName" for pointers instead of "type *varName", same for reference types
    The * and & are part of the type, NOT the variable name.
    It would be like saying "unsigned intmyInt;" instead of "unsigned int myInt;"

Always try to use references instead of pointers when possible!
    Especially for passing data around, references are much safer and simpler to use.

Always try to allocate things on the stack instead of the heap
    Also use stack allocated objects that use heap memory such as STL containers
    Use smart pointers when allocating memory
        Try using unique_ptr if possible before reverting to shared_ptr
    Use raw pointers only for maximum performance and be very careful...

Always use const when possible:
    const references for read only access
    const functions for functions that do not modify anything in classes
    const variables for variables that should never change during program execution

Curly brackets should all be on their own line. It makes things easier to read and less cluttered.
    Example:
        void someFunction()
        {
            // Do something...
        }
        vs:
        void someFunction() {
            // Do something...
        }

Function prototypes should only have data types without variable names!
    We could change this later maybe...
        Example:
        void someFunc(int);
            vs:
        void someFunc(int someVar);

Global variables and singletons are prohibited!
    If an object needs access to another object, just pass a reference or pointer to it!
        This isn't hard to do, and not everything will need access to something.
    If you only need a single instance of a class, just make one instance of the class!
        No need to restrict it to what you need at the time...

Classes should be as simple as possible and only have a single purpose!
    Do not create classes which do a bunch of unrelated things...

All function names should be some form of a verb!
